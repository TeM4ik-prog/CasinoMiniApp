import { Update, Start, Help, Command, Ctx, Message, On } from 'nestjs-telegraf';
import { Context, Input, Scenes } from 'telegraf';
import { TelegramService } from './telegram.service';
import { ConfigService } from '@nestjs/config';
import * as fs from 'fs';
import { GiftsService } from '@/gifts/gifts.service';
import { UsersService } from '@/users/users.service';
import { BotScenes } from '@/types/types';
import { formatMessage } from '@/utils/formatMessage';



@Update()
export class TelegramUpdate {
  constructor(
    private readonly telegramService: TelegramService,
    private configService: ConfigService,
    private giftsService: GiftsService,
    private readonly userService: UsersService
  ) { }


  @Start()
  async onStart(@Ctx() ctx: Context) {
    this.telegramService.addToActiveChats(ctx.message)

    await this.userService.findOrCreateUser(ctx.from)

    const stream = this.telegramService.getPhotoStream("./public/images/sticker.png")
    await ctx.telegram.sendPhoto(ctx.chat.id, stream, {
      reply_markup: {
        inline_keyboard: [
          [{
            text: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' + this.configService.get('APP_URL'),
            web_app: { url: this.configService.get('APP_URL') },
          }],
        ],
      },
    });

  }

  @Help()
  async onHelp(@Ctx() ctx: Context) {
    await ctx.reply(`–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: \n/start \n/help \n/info`);
  }

  @Command('info')
  async onInfo(@Ctx() ctx: Context) {
    const info = this.telegramService.getInfo(ctx.from?.id);
    await ctx.reply(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${info}`);
  }

  @Command('ping')
  async onPing(@Ctx() ctx: Context) {
    await ctx.reply('pong')
  }

  @Command('getminprofit')
  async onGetMinProfit(@Ctx() ctx: Context) {

    const minProfit = await this.userService.getUserMinProfit(ctx.from.id)

    const message = formatMessage([
      `–í–∞—à —Ç–µ–∫—É—â–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: ${minProfit} TON`,
      '',
      '–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ —Å–¥–µ–ª–∫–∞—Ö –≤—ã—à–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.',
      '',
      '–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /setminprofit',
    ],
      {
        style: 'markdownv2',
        emoji: 'üìà',
      }
    );

    await ctx.reply(message.text, {
      parse_mode: message.parse_mode,
    });
  }

  @Command('setminprofit')
  async onSetMinProfit(@Ctx() ctx: Scenes.SceneContext) {
    return ctx.scene.enter(BotScenes.MIN_PROFIT);
  }






  @On('message')
  async onText(@Ctx() ctx: Context) {

    console.log('message')

  }
}
