generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model VerificationCode {
  id        String    @id @default(uuid())
  code      String
  expiresAt DateTime
  userId    String
  user      EmailUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model UserBase {
  id     String  @id @default(uuid())
  banned Boolean @default(false)
  role   String  @default("user")

  name   String  @default("User")
  avatar String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EmailUser    EmailUser?
  TelegramUser TelegramUser?
  GoogleUser   GoogleUser?
}

model EmailUser {
  id       String  @id @default(uuid())
  email    String  @unique
  password String?

  userBaseId String   @unique
  userBase   UserBase @relation(fields: [userBaseId], references: [id])

  VerificationCode VerificationCode[]
}

model TelegramUser {
  id         String @id @default(uuid())
  telegramId String @unique

  firstName String
  username  String
  photoUrl  String
  authDate  DateTime

  userBaseId String   @unique
  userBase   UserBase @relation(fields: [userBaseId], references: [id])
}

model GoogleUser {
  id    String @id @default(uuid())
  email String @unique

  name      String
  givenName String

  photoUrl String

  userBaseId String   @unique
  userBase   UserBase @relation(fields: [userBaseId], references: [id])
}

// ________

model Post {
  id          String   @id @default(uuid())
  title       String
  content     String
  imageUrl    String
  date        String
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
