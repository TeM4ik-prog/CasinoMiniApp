{
  "version": 3,
  "sources": ["../keystone.ts"],
  "sourcesContent": ["import { config, list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport { float, image, integer, text } from '@keystone-6/core/fields';\nimport auth from 'basic-auth';\n\nconst requireAuth = (req, res, next) => {\n  const user = auth(req);\n\n  if (\n    user &&\n    user.name === 'admin' &&\n    user.pass === 'admin1111'\n  ) {\n    next();\n  } else {\n    res.set('WWW-Authenticate', 'Basic realm=\"Keystone\"');\n    res.status(401).send('Authentication required.');\n  }\n};\n\nexport default config({\n\n  db: {\n    provider: 'sqlite',\n    // url: 'file:../backend/prisma/dev.db',\n  },\n\n  storage: {\n    images: {\n      kind: 'local',\n      type: 'image',\n      generateUrl: path => `/uploads/images/${path}`,\n      serverRoute: {\n        path: '/uploads/images',\n      },\n      storagePath: 'uploads/images',\n    },\n\n    videos: {\n      kind: 'local',\n      type: 'file',\n      generateUrl: path => `/uploads/videos/${path}`,\n      serverRoute: {\n        path: '/uploads/videos',\n      },\n      storagePath: 'uploads/videos',\n    },\n  },\n\n  lists: {\n\n    User: list({\n      access: allowAll,\n      fields: {\n        telegramId: integer({\n          validation: { isRequired: true },\n          isIndexed: 'unique',\n          db: { isNullable: false },\n        }),\n        username: text({\n          validation: { isRequired: true },\n          db: { isNullable: false },\n        }),\n        lastName: text({\n          db: { isNullable: true },\n        }),\n        firstName: text({\n          db: { isNullable: true },\n        }),\n        photoUrl: text({\n          db: { isNullable: true },\n        }),\n\n        balance: float({\n          defaultValue: 0\n        })\n      },\n\n      ui: {\n        label: '\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0438',\n        listView: {\n          initialColumns: ['username', 'telegramId', 'firstName', 'lastName'],\n        },\n      },\n    }),\n\n    Product: list({\n      access: allowAll,\n      fields: {\n        title: text({ validation: { isRequired: true } }),\n        content: text(),\n        image: image({\n          storage: 'images',\n        }),\n\n        // video: file({\n        //   storage: 'videos',\n        // }),\n      },\n\n      ui: {\n        label: '\u0422\u043E\u0432\u0430\u0440\u044B',\n        listView: {\n          initialColumns: ['title', 'content', 'image'],\n        },\n      }\n    }),\n  },\n\n\n  ui: {\n    isDisabled: false,\n  },\n\n\n\n  // graphql: {\n  //   playground: false,\n\n  //   apolloConfig: {\n  //     introspection: false,\n  //   },\n  // },\n\n  server: {\n    port: 3001,\n    // cors: { \n    //   origin: true, \n    //   credentials: true,\n      \n    //   methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n    //   allowedHeaders: ['Content-Type', 'Authorization'],\n    // },\n    extendExpressApp: (app) => {\n      app.use(requireAuth);\n    },\n  },\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA6B;AAC7B,oBAAyB;AACzB,oBAA4C;AAC5C,wBAAiB;AAEjB,IAAM,cAAc,CAAC,KAAK,KAAK,SAAS;AACtC,QAAM,WAAO,kBAAAA,SAAK,GAAG;AAErB,MACE,QACA,KAAK,SAAS,WACd,KAAK,SAAS,aACd;AACA,SAAK;AAAA,EACP,OAAO;AACL,QAAI,IAAI,oBAAoB,wBAAwB;AACpD,QAAI,OAAO,GAAG,EAAE,KAAK,0BAA0B;AAAA,EACjD;AACF;AAEA,IAAO,uBAAQ,oBAAO;AAAA,EAEpB,IAAI;AAAA,IACF,UAAU;AAAA;AAAA,EAEZ;AAAA,EAEA,SAAS;AAAA,IACP,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa,UAAQ,mBAAmB,IAAI;AAAA,MAC5C,aAAa;AAAA,QACX,MAAM;AAAA,MACR;AAAA,MACA,aAAa;AAAA,IACf;AAAA,IAEA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa,UAAQ,mBAAmB,IAAI;AAAA,MAC5C,aAAa;AAAA,QACX,MAAM;AAAA,MACR;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EAEA,OAAO;AAAA,IAEL,UAAM,kBAAK;AAAA,MACT,QAAQ;AAAA,MACR,QAAQ;AAAA,QACN,gBAAY,uBAAQ;AAAA,UAClB,YAAY,EAAE,YAAY,KAAK;AAAA,UAC/B,WAAW;AAAA,UACX,IAAI,EAAE,YAAY,MAAM;AAAA,QAC1B,CAAC;AAAA,QACD,cAAU,oBAAK;AAAA,UACb,YAAY,EAAE,YAAY,KAAK;AAAA,UAC/B,IAAI,EAAE,YAAY,MAAM;AAAA,QAC1B,CAAC;AAAA,QACD,cAAU,oBAAK;AAAA,UACb,IAAI,EAAE,YAAY,KAAK;AAAA,QACzB,CAAC;AAAA,QACD,eAAW,oBAAK;AAAA,UACd,IAAI,EAAE,YAAY,KAAK;AAAA,QACzB,CAAC;AAAA,QACD,cAAU,oBAAK;AAAA,UACb,IAAI,EAAE,YAAY,KAAK;AAAA,QACzB,CAAC;AAAA,QAED,aAAS,qBAAM;AAAA,UACb,cAAc;AAAA,QAChB,CAAC;AAAA,MACH;AAAA,MAEA,IAAI;AAAA,QACF,OAAO;AAAA,QACP,UAAU;AAAA,UACR,gBAAgB,CAAC,YAAY,cAAc,aAAa,UAAU;AAAA,QACpE;AAAA,MACF;AAAA,IACF,CAAC;AAAA,IAED,aAAS,kBAAK;AAAA,MACZ,QAAQ;AAAA,MACR,QAAQ;AAAA,QACN,WAAO,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,QAChD,aAAS,oBAAK;AAAA,QACd,WAAO,qBAAM;AAAA,UACX,SAAS;AAAA,QACX,CAAC;AAAA;AAAA;AAAA;AAAA,MAKH;AAAA,MAEA,IAAI;AAAA,QACF,OAAO;AAAA,QACP,UAAU;AAAA,UACR,gBAAgB,CAAC,SAAS,WAAW,OAAO;AAAA,QAC9C;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAGA,IAAI;AAAA,IACF,YAAY;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,QAAQ;AAAA,IACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQN,kBAAkB,CAAC,QAAQ;AACzB,UAAI,IAAI,WAAW;AAAA,IACrB;AAAA,EACF;AACF,CAAC;",
  "names": ["auth"]
}
