import { findWinningSymbol } from '@/utils/slotUtils';
import Phaser from 'phaser';

// –ò–∑–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç —Ñ–æ–Ω–∞

interface SymbolConfig {
    emoji: string;
    rarity: number; // 5 - —Å–∞–º—ã–π —Ä–µ–¥–∫–∏–π, 1 - —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π
    payouts: number[]; // –≤—ã–ø–ª–∞—Ç—ã –∑–∞ 3, 4, 5 —Å–∏–º–≤–æ–ª–æ–≤
}

export class SlotMachine extends Phaser.Scene {
    private reels: Phaser.GameObjects.Text[][] = [];
    private spinButton!: Phaser.GameObjects.Text;
    private symbols: SymbolConfig[] = [
        { emoji: 'üí∞', rarity: 5, payouts: [200, 1000, 5000] }, // –î–µ–Ω—å–≥–∏ - —Å–∞–º—ã–π —Ä–µ–¥–∫–∏–π
        { emoji: 'üíé', rarity: 4, payouts: [100, 500, 2000] },  // –ê–ª–º–∞–∑
        { emoji: 'üçí', rarity: 3, payouts: [100, 300, 800] },    // –í–∏—à–Ω—è
        { emoji: 'üçä', rarity: 3, payouts: [100, 150, 300] },    // –ê–ø–µ–ª—å—Å–∏–Ω
        { emoji: 'üçã', rarity: 2, payouts: [60, 130, 200] },     // –õ–∏–º–æ–Ω
        { emoji: 'üçá', rarity: 1, payouts: [30, 120, 300] },     // –í–∏–Ω–æ–≥—Ä–∞–¥
        { emoji: 'üçâ', rarity: 1, payouts: [30, 120, 500] },    // –ê—Ä–±—É–∑
        { emoji: 'üçì', rarity: 1, payouts: [30, 100, 400] }     // –ö–ª—É–±–Ω–∏–∫–∞
    ];
    private isSpinning: boolean = false;
    private winText!: Phaser.GameObjects.Text;
    private scoreText!: Phaser.GameObjects.Text;
    private spinningSymbols: Phaser.GameObjects.Text[][] = [];
    private reelMasks: Phaser.GameObjects.Graphics[] = [];
    private finalSymbols: string[] = [];
    private reelFrames: Phaser.GameObjects.Graphics[] = [];
    private symbolPool: Phaser.GameObjects.Text[] = [];
    private activeSymbols: Set<Phaser.GameObjects.Text> = new Set();
    private startX: number = 0;
    private balance: number = 1000; // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ —Ä—É–±–ª—è—Ö
    private readonly SPIN_COST: number = 50; // –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤ —Ä—É–±–ª—è—Ö

    private margin: number = 48;
    private readonly REEL_COUNT = 5;
    private readonly SYMBOL_COUNT = 30;
    private readonly ANIMATION_DURATION = 700;

    private readonly DELAY = 300;
    private readonly REEL_WIDTH = 100;
    private readonly REEL_SPACING = 20;
    private middleArrows: Phaser.GameObjects.Graphics[] = [];

    constructor() {
        super({ key: 'SlotMachine' });
    }

    preload() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–∞
        this.load.image('slotBackground', 'assets/slot-background.png');
    }

    create() {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–∞
        const bg = this.add.image(400, 300, 'slotBackground').setOrigin(0.5, 0.5);
        bg.setDisplaySize(800, 600);

        // // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –¥–ª—è —Ñ–æ–Ω–∞
        // const glow = this.add.graphics();
        // glow.fillStyle(0x000000, 0.3);
        // glow.fillRect(0, 0, 800, 600);

        const totalWidth = (this.REEL_COUNT * this.REEL_WIDTH) + ((this.REEL_COUNT - 1) * this.REEL_SPACING);
        this.startX = (800 - totalWidth) / 2 + this.REEL_WIDTH / 2;

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–º–æ–∫ –¥–ª—è –±–∞—Ä–∞–±–∞–Ω–æ–≤ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å–≤–µ—á–µ–Ω–∏—è
        for (let i = 0; i < this.REEL_COUNT; i++) {
            const x = this.startX + i * (this.REEL_WIDTH + this.REEL_SPACING);
            
            // –°–≤–µ—á–µ–Ω–∏–µ —Ä–∞–º–∫–∏
            const glow = this.add.graphics();
            glow.lineStyle(8, 0xffffff, 0.3);
            glow.strokeRect(x - this.REEL_WIDTH / 2 + 5, 145 + 5, this.REEL_WIDTH - 10, 310 - 10);
            this.reelFrames.push(glow);

            // –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–º–∫–∞
            const frame = this.add.graphics();
            frame.lineStyle(4, 0xffffff);
            frame.strokeRect(x - this.REEL_WIDTH / 2 + 10, 150 + 10, this.REEL_WIDTH - 20, 300 - 20);
            this.reelFrames.push(frame);

            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const arrow = this.add.graphics();
            arrow.lineStyle(3, 0xffff00);
            arrow.beginPath();
            arrow.moveTo(x - this.REEL_WIDTH / 2 - 20, 300);
            arrow.lineTo(x - this.REEL_WIDTH / 2 - 10, 290);
            arrow.lineTo(x - this.REEL_WIDTH / 2 - 10, 310);
            arrow.closePath();
            arrow.fillStyle(0xffff00);
            arrow.fill();
            this.middleArrows.push(arrow);

            const arrow2 = this.add.graphics();
            arrow2.lineStyle(3, 0xffff00);
            arrow2.beginPath();
            arrow2.moveTo(x + this.REEL_WIDTH / 2 + 20, 300);
            arrow2.lineTo(x + this.REEL_WIDTH / 2 + 10, 290);
            arrow2.lineTo(x + this.REEL_WIDTH / 2 + 10, 310);
            arrow2.closePath();
            arrow2.fillStyle(0xffff00);
            arrow2.fill();
            this.middleArrows.push(arrow2);
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–æ–∫ –¥–ª—è –±–∞—Ä–∞–±–∞–Ω–æ–≤
        for (let i = 0; i < this.REEL_COUNT; i++) {
            const x = this.startX + i * (this.REEL_WIDTH + this.REEL_SPACING);
            const mask = this.add.graphics();
            mask.fillStyle(0x000000, 0.7);
            mask.fillRect(x - this.REEL_WIDTH / 2 + 10, 150 + 10, this.REEL_WIDTH - 20, 300 - 20);
            this.reelMasks.push(mask);
        }

        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–∏–º–≤–æ–ª–æ–≤
        this.createSymbolPool();

        // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤
        for (let i = 0; i < this.REEL_COUNT; i++) {
            const x = this.startX + i * (this.REEL_WIDTH + this.REEL_SPACING);
            const reelSymbols: Phaser.GameObjects.Text[] = [];
            const symbol = this.getSymbolFromPool(
                x,
                300,
                this.symbols[Math.floor(Math.random() * this.symbols.length)].emoji
            );
            reelSymbols.push(symbol);
            this.reels.push(reelSymbols);
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏–Ω–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        this.spinButton = this.add.text(400, 550, 'SPIN', {
            fontSize: '32px',
            color: '#ffffff',
            backgroundColor: '#ff0000',
            padding: { x: 30, y: 15 }
        }).setOrigin(0.5);

        // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π
        this.spinButton.setInteractive();
        this.spinButton.on('pointerdown', () => this.spin());

        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        this.tweens.add({
            targets: this.spinButton,
            scale: 1.1,
            duration: 1000,
            yoyo: true,
            repeat: -1,
            ease: 'Sine.easeInOut'
        });

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤—ã–∏–≥—Ä—ã—à–∞
        this.winText = this.add.text(400, 100, '', {
            fontSize: '48px',
            color: '#ffffff'
        }).setOrigin(0.5).setVisible(false);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –±–∞–ª–∞–Ω—Å–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        this.scoreText = this.add.text(400, 50, `–ë–∞–ª–∞–Ω—Å: ${this.balance} ‚ÇΩ`, {
            fontSize: '32px',
            color: '#ffffff',
            padding: { x: 20, y: 10 },
            backgroundColor: '#000000'
        }).setOrigin(0.5);

        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
        this.tweens.add({
            targets: this.scoreText,
            alpha: 0.8,
            duration: 1000,
            yoyo: true,
            repeat: -1
        });

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        const costText = this.add.text(400, 500, `–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: ${this.SPIN_COST} ‚ÇΩ`, {
            fontSize: '24px',
            color: '#ffffff',
            padding: { x: 15, y: 8 },
            backgroundColor: '#000000'
        }).setOrigin(0.5);

        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –º–µ—Ä—Ü–∞–Ω–∏—è –¥–ª—è —Å—Ç—Ä–µ–ª–æ–∫
        this.middleArrows.forEach(arrow => {
            this.tweens.add({
                targets: arrow,
                alpha: 0.5,
                duration: 1000,
                yoyo: true,
                repeat: -1
            });
        });
    }

    private createSymbolPool() {
        for (let i = 0; i < this.REEL_COUNT * this.SYMBOL_COUNT; i++) {
            const symbol = this.add.text(0, 0, '', {
                fontSize: '64px',
                color: '#ffffff'
            }).setOrigin(0.5);
            symbol.setVisible(false);
            this.symbolPool.push(symbol);
        }
    }

    private getSymbolFromPool(x: number, y: number, text: string): Phaser.GameObjects.Text {
        const symbol = this.symbolPool.find(s => !s.visible);
        if (symbol) {
            symbol.setPosition(x, y);
            symbol.setText(text);
            symbol.setVisible(true);
            this.activeSymbols.add(symbol);
            return symbol;
        }
        throw new Error('No available symbols in pool');
    }

    private returnSymbolToPool(symbol: Phaser.GameObjects.Text) {
        symbol.setVisible(false);
        this.activeSymbols.delete(symbol);
    }

    private getRandomSymbol(): SymbolConfig {
        // –°–æ–∑–¥–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö —Ä–µ–¥–∫–æ—Å—Ç–∏
        const weightedSymbols: SymbolConfig[] = [];
        this.symbols.forEach(symbol => {
            
            const weight = 7 - symbol.rarity; // rarity –æ—Ç 1 –¥–æ 5
            for (let i = 0; i < weight; i++) {
                weightedSymbols.push(symbol);
            }
        });

        return weightedSymbols[Math.floor(Math.random() * weightedSymbols.length)];
    }

    private spin() {
        if (this.isSpinning) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        if (this.balance < this.SPIN_COST) {
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
            this.tweens.add({
                targets: this.winText,
                x: 400,
                y: 100,
                alpha: 1,
                duration: 300,
                onStart: () => {
                    this.winText.setText('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
                    this.winText.setVisible(true);
                },
                onComplete: () => {
                    this.time.delayedCall(1000, () => {
                        this.tweens.add({
                            targets: this.winText,
                            alpha: 0,
                            duration: 300,
                            onComplete: () => {
                                this.winText.setVisible(false);
                            }
                        });
                    });
                }
            });
            return;
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        this.tweens.add({
            targets: this.spinButton,
            scale: 0.9,
            duration: 100,
            yoyo: true
        });

        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        this.balance -= this.SPIN_COST;
        this.scoreText.setText(`–ë–∞–ª–∞–Ω—Å: ${this.balance} ‚ÇΩ`);

        this.isSpinning = true;
        this.winText.setVisible(false);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –ø—É–ª
        this.activeSymbols.forEach(symbol => this.returnSymbolToPool(symbol));
        this.activeSymbols.clear();
        this.spinningSymbols = [];

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        this.finalSymbols = Array.from({ length: this.REEL_COUNT }, () =>
            this.getRandomSymbol().emoji
        );

        // –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        for (let i = 0; i < this.REEL_COUNT; i++) {
            const x = this.startX + i * (this.REEL_WIDTH + this.REEL_SPACING);
            const symbols: Phaser.GameObjects.Text[] = [];

            for (let j = -this.SYMBOL_COUNT; j < 0; j++) {
                const isWinSymbol = j === -29;
                const symbolConfig = isWinSymbol ?
                    this.symbols.find(s => s.emoji === this.finalSymbols[i])! :
                    this.getRandomSymbol();

                const symbol = this.getSymbolFromPool(
                    x,
                    150 + j * (50 + this.margin),
                    symbolConfig.emoji
                );
                symbol.setColor(isWinSymbol ? '#ffff00' : '#ffffff');
                symbol.setMask(new Phaser.Display.Masks.GeometryMask(this, this.reelMasks[i]));
                symbols.push(symbol);
            }

            this.spinningSymbols.push(symbols);
        }

        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        this.spinningSymbols.forEach((symbols, reelIndex) => {
            this.time.delayedCall(reelIndex * this.DELAY, () => {
                this.tweens.add({
                    targets: symbols,
                    y: '+=3000',
                    duration: this.ANIMATION_DURATION,
                    ease: 'Cubic.easeOut',
                    onComplete: () => {
                        if (reelIndex === this.REEL_COUNT - 1) {
                            this.isSpinning = false;
                            this.checkWin();
                        }
                    }
                });
            });
        });
    }

    private checkWin() {
        const winSymbols = this.finalSymbols;
        const winningSymbol = findWinningSymbol(winSymbols);

        if (!winningSymbol) {
            this.winText.setText('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!');
            this.winText.setVisible(true);
            return;
        }

        const symbolData = this.symbols.find(s => s.emoji === winningSymbol.symbol)!;
        const baseWin = symbolData.payouts[winningSymbol.count - 3];
        const rarityMultiplier = 6 - symbolData.rarity;
        const totalWin = baseWin * rarityMultiplier;

        if (totalWin > 0) {
            this.balance += totalWin;
            this.scoreText.setText(`–ë–∞–ª–∞–Ω—Å: ${this.balance} ‚ÇΩ`);
            
            // –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –≤—ã–∏–≥—Ä—ã—à–∞
            this.tweens.add({
                targets: this.winText,
                scale: 1.2,
                duration: 200,
                yoyo: true,
                repeat: 1,
                onStart: () => {
                    this.winText.setText(`–í—ã–∏–≥—Ä—ã—à: ${totalWin} ‚ÇΩ üéâ`);
                    this.winText.setVisible(true);
                }
            });

            // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            this.highlightWinningSymbols(winningSymbol);

            // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
            this.tweens.add({
                targets: this.scoreText,
                scale: 1.1,
                duration: 200,
                yoyo: true,
                repeat: 1
            });
        }
    }

    private highlightWinningSymbols(winningSymbol: any) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        this.spinningSymbols.forEach(reel => {
            reel.forEach(symbol => {
                symbol.setColor('#ffffff');
            });
        });

        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        this.spinningSymbols.forEach((reel, reelIndex) => {
            if (reel[reel.length - 1].text === winningSymbol.symbol) {
                reel[reel.length - 1].setColor('#ffff00');
                this.tweens.add({
                    targets: reel[reel.length - 1],
                    scale: 1.2,
                    duration: 500,
                    yoyo: true,
                    repeat: -1
                });
            }
        });
    }
} 